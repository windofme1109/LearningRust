// 基于属性创建代码的过程宏

// 第二种形式的宏更像函数(某种形式的过程)一些，所以它们被称为过程宏
// 过程宏会接收并操作输入的 Rust 代码，并生成另外一些 Rust 代码作为结果，这与声明宏根据模式匹配来替换代码的行为有所不同

// 虽然过程宏存在 3 种不同的类型(自定义派生宏、属性宏及函数宏)，但它们都具有非常类似的工作机制
// 当创建过程宏时，宏的定义必须单独放在它们自己的包中，并使用特殊的包类型。这完全是因为技术上的原因，我们希望未来能够消除这种限制
// use proc_macro;
// #[some_attribute]
// pub fn some_name(input: TokenStream) -> TokenStream {

// }

// 上面的代码定义了过程宏的函数
// 其接收一个 TokenStream 作为输入，并产生一个 TokenStream 作为输出
// TokenStream 类型在 proc_macro 包(Rust 自带)中定义，表示一段标记序列
// 这也是过程宏的核心所在: 需要被宏处理的源代码组成了输入的 TokenStream
// 而宏生成的代码则组成了输出的 TokenStream，函数附带的属性决定了我们究竟创建的是哪一种过程宏
// 同一个包中可以拥有多种不同类型的过程宏

// 编写自定义的 derive 宏